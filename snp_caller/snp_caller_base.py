import sys, os, subprocess, abc

class SNPCallerBase(object):
    '''Generic SNP Caller Interface class. This class does not 
directly implement any real functionality. Attempting to use any
will raise a *NotImplementedError*

    '''
    
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def __init__(self, opts, bin_dir):
        '''Constructs a SNPCaller instance to make system calls 
to a third party SNP Calling program. 

:param bin_dir: The location of the executables for this program
:param opts: Arbitrary keyword argument configurations
'''
        self.bin_dir = bin_dir
        if self.bin_dir != '':
            self.bin_dir += os.sep
        self.opts = opts

    @abc.abstractmethod
    def get_reference_genome(self, tax_id = None, org_name = None, gene_id = None, source = None, **kwargs):
        '''Retrieves and indexes the appropriate reference genome. 

:param tax_id: integer NCBI taxonomy id
:param org_name: string organism name
:param source: string reference to reference genome location
:param kwargs: kwargs
:rtype: string path to indexed reference genome file 

One of **tax_id**, **org_name**, or **source** must be provided, and only one.
        '''
        if org_name != None: 
            print("Get By org_name")
            raise NotImplementedError()
        elif tax_id != None: 
            print("Get By tax_id")
            raise NotImplementedError()
        elif gene_id != None:
            print("Get By gene_id")
            raise NotImplementedError()
        elif source != None:
            print("Get By source")
            return source
        else:
            raise Exception("No Genome Provides")


    @abc.abstractmethod
    def call_snps(self, output_sam_file, tax_id = None, org_name = None, gene_id = None, source = None, **kwargs):
        '''Initiates the SNP Calling pipeline.

:param output_sam_file: A string path to the .sam file generated by PathoID
:param tax_id: integer NCBI taxonomy id
:param org_name: string organism name
:param source: string reference to reference genome location
:param kwargs: kwargs
:rtype: string path to .vcf or .bcf file

One of **tax_id**, **org_name**, or **source** must be provided, and only one. These parameters are passed 
to self.get_reference_genome()
        '''
        raise NotImplementedError()

class SNPCallerException(Exception):
    '''Exception class representing programmatic errors while SNP Calling'''
    pass