import sys
import os
import abc

import snp_utils

class SNPCallerBase(object):
    '''Generic SNP Caller Interface class. This class does not 
directly implement any real functionality. Attempting to use any
will raise a *NotImplementedError*

    '''
    
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def __init__(self, opts, bin_dir):
        '''Constructs a SNPCaller instance to make system calls 
to a third party SNP Calling program. 
@param bin_dir The location of the executables for this program
@param opts Arbitrary keyword argument configurations
'''
        self.bin_dir = bin_dir
        if self.bin_dir != '':
            self.bin_dir += os.sep
        self.opts = opts

## get_reference_genome
# Retrieves and indexes the appropriate reference genome.
# @param source string reference to reference genome location
# @param tax_ids list of integer NCBI taxonomy ids
# @param gene_ids list of integer NCBI gene ids
# @param org_name string regular expression matching one or more organism names
# @param kwargs kwargs
# @return string path to indexed reference genome file 
    @abc.abstractmethod
    def get_reference_genome(self,source, tax_ids = None, org_name = None, gene_ids = None, **kwargs):
        if tax_ids or org_name or gene_ids:
            parser = snp_utils.FastaParser(source)
            parser.parse_file()
            # Only check if there is a value other than ''
            if len(tax_ids[0]) != 0:
                parser.filter_by_tax_ids(tax_ids)
            if org_name:
                parser.filter_by_org_name(org_name)
            # Only check if there is a value other than ''
            if len(gene_ids[0]) != 0:
                parser.filter_by_gene_ids(gene_ids)

            filtered_source = parser.write_output()
            print(filtered_source)
            return filtered_source

        else:
            return source


    @abc.abstractmethod
    def call_snps(self, output_sam_file, source, tax_ids = None, org_name = None, gene_ids = None, **kwargs):
        '''Initiates the SNP Calling pipeline.
@param output_sam_file A string path to the .sam file generated by PathoID
@param tax_id integer NCBI taxonomy id
@param org_name string organism name
@param source string reference to reference genome location
@param kwargs kwargs
@return string path to .vcf or .bcf file
        '''
        raise NotImplementedError()

class SNPCallerException(Exception):
    '''Exception class representing programmatic errors while SNP Calling'''
    pass